#!/usr/bin/env bash

if ! command -v php >/dev/null 2>&1; then 
  echo "PHP is not installed or not in PATH" 
  exit 1
fi

REQUIRED_TOOLS=("vendor/bin/phpcbf" "vendor/bin/phpcs" "vendor/bin/phpstan")
MISSING_TOOLS=()
for tool in "${REQUIRED_TOOLS[@]}"; do 
  if [ ! -f "$tool" ] || [ ! -x "$tool" ]; then 
    MISSING_TOOLS+=("$tool") 
  fi 
done
if [ ${#MISSING_TOOLS[@]} -ne 0 ]; then
  echo "Required tools not found or not executable: ${MISSING_TOOLS[*]}" 
  echo "Running 'composer install' to install dependencies..."
  if ! composer install; then
    echo "Failed to install dependencies. Please run 'composer install' manually."
    exit 1
  fi
fi


# Run PHP Code Beautifier and Fixer (phpcbf) on all PHP files in the staged changes
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$')
if [[ "$STAGED_FILES" = "" ]]; then
  echo "No PHP files staged for commit."
  exit 0
fi

# Verify files exist and are readable
for file in "${STAGED_FILES[@]}"; do
  if [ ! -r "$file" ]; then
    echo "Error: File '$file' is not readable or doesn't exist"
    exit 1
  fi
done


echo "Running phpcbf to fix PHPCS errors..."
for file in "${STAGED_FILES[@]}"; do
  echo "Processing $file..."
  if vendor/bin/phpcbf "$file"; then
    MODIFIED_FILES+=("$file")
  else
    echo "Warning: phpcbf failed on $file"
  fi 
done

# Add the modified files to the staging area
echo "Re-adding files after phpcbf fixes..."
if [ ${#MODIFIED_FILES[@]} -gt 0 ]; then
  echo "Re-adding modified files to staging area:"
  printf '%s\n' "${MODIFIED_FILES[@]}"
  git add "${MODIFIED_FILES[@]}" 
fi

# Check for configuration files 
CONFIG_FILES=("phpcs.xml" "phpstan.neon")
for config in "${CONFIG_FILES[@]}"; do
  if [ ! -f "$config" ]; then
    echo "Warning: $config not found, using default configuration"
  fi 
done 

# Run PHPCS to check for remaining issues
echo "Running PHPCS..."
if ! vendor/bin/phpcs "${STAGED_FILES[@]}"; then
  echo "PHPCS check failed" 
  exit 1 
fi

# Run PHPStan for static analysis
echo "Running PHPStan..."
if ! vendor/bin/phpstan analyse --memory-limit=512M "${STAGED_FILES[@]}"; then
  echo "PHPStan check failed" 
  exit 1 
fi

echo "All checks passed. Proceeding with commit."
exit 0
